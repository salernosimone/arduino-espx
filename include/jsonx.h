#pragma once

#include <functional>
#include <initializer_list>

/**
 * Generate JSON with a fluent interface
 */
class Jsonx {
public:
    /**
     * Constructor
     * @param printer
     */
    explicit Jsonx(Print& printer) : out(&printer) {

    }

    /**
     * Wrap primitives and nested objects.
     * Generated by ChatGPT
     */
    struct Node {
        std::function<void(Print&)> write;

        /**
         * Constructor
         * @param writer
         */
        Node(std::function<void(Print&)> writer) : write(std::move(writer)) {

        }

        /**
         * Write value to output
         * @param o
         */
        void emit(Print& o) const {
            write(o);
        }
    };

    /**
     * Start a new object
     * @param fields
     */
    void rootObject(std::initializer_list<Node> fields) {
        out->print('{');
        bool first = true;
        for (const auto& field : fields) {
            if (!first) out->print(',');
            field.emit(*out);
            first = false;
        }
        out->print('}');
    }

    /**
     * Create an empty object
     * @param fields
     * @return
     */
    Node object() {
        return Node([](Print& o) {
            o.print('{');
            o.print('}');
        });
    }

    /**
     * Create a nested object
     * @param fields
     * @return
     */
    Node object(std::initializer_list<Node> fields) {
        return Node([fields](Print& o) {
            o.print('{');
            bool first = true;

            for (const auto& field : fields) {
                if (!first) o.print(',');
                field.emit(o);
                first = false;
            }

            o.print('}');
        });
    }

    /**
     * Create a nested object
     * @param key
     * @param fields
     * @return
     */
    Node object(const char *key, std::initializer_list<Node> fields) {
        return Node([=](Print& o) {
            printQuoted(o, key);
            o.print(':');
            o.print('{');
            bool first = true;

            for (const auto& field : fields) {
                if (!first) o.print(',');
                field.emit(o);
                first = false;
            }

            o.print('}');
        });
    }

    /**
     * List value
     * @tparam Args
     * @param args
     * @return
     */
    template<typename... Args>
    Node list(const char* key, Args... args) {
        return Node([=](Print& o) {
            printQuoted(o, key);
            o.print(':');
            o.print('[');
            emitValues(o, args...);
            o.print(']');
        });
    }

    /**
     * String attribute
     * @param key
     * @param value
     * @return
     */
    Node scalar(const char* key, const char* value) {
        return Node([=](Print& o) {
            printQuoted(o, key);
            o.print(':');
            printQuoted(o, value);
        });
    }

    /**
     *
     * @param key
     * @param value
     * @return
     */
    Node string(const char* key, String value) {
        return Node([=](Print& o) {
            printQuoted(o, key);
            o.print(':');
            printQuoted(o, value.c_str());
        });
    }

    /**
     * Float attribute
     * @param key
     * @param value
     * @return
     */
    Node scalar(const char* key, float value) {
        return Node([=](Print& o) {
            printQuoted(o, key);
            o.print(':');
            o.print(value, 6);
        });
    }

    /**
     * Int value
     * @param key
     * @param value
     * @return
     */
    Node scalar(const char* key, int value) {
        return Node([=](Print& o) {
            printQuoted(o, key);
            o.print(':');
            o.print(value);
        });
    }

    /**
     * Int value
     * @param key
     * @param value
     * @return
     */
    Node scalar(const char* key, unsigned int value) {
        return Node([=](Print& o) {
            printQuoted(o, key);
            o.print(':');
            o.print(value);
        });
    }

    /**
     * Boolean attribute
     * @param key
     * @param value
     * @return
     */
    Node scalar(const char* key, bool value) {
        return Node([=](Print& o) {
            printQuoted(o, key);
            o.print(':');
            o.print(value ? F("true") : F("false"));
        });
    }

    /**
     * NULL attribute
     * @param key
     * @return
     */
    Node null(const char* key) {
        return Node([=](Print& o) {
            printQuoted(o, key);
            o.print(':');
            o.print(F("null"));
        });
    }

    /**
     * NULL value
     * @param key
     * @return
     */
    Node null() {
        return Node([=](Print& o) {
            o.print(F("null"));
        });
    }

private:
    Print* out;

    /**
     * Quote string value
     * @param o
     * @param str
     */
    static void printQuoted(Print& o, const char* str) {
        o.print('"');
        
        while (*str) {
            if (*str == '"' || *str == '\\') {
                o.print('\\');
            }
            o.print(*str++);
        }
        
        o.print('"');
    }

    /**
     *
     * @param o
     * @param items
     */
    static void emitList(Print& o, std::initializer_list<Node> items) {
        o.print('[');
        bool first = true;
        
        for (const auto& item : items) {
            if (!first) o.print(',');
            item.emit(o);
            first = false;
        }
        
        o.print(']');
    }

    /**
     * 
     * @tparam T 
     * @param o 
     * @param value 
     */
    template<typename T>
    static void emitValues(Print& o, T value) {
        emitSingle(o, value);
    }

    /**
     * 
     * @tparam T 
     * @tparam Rest 
     * @param o 
     * @param value 
     * @param rest 
     */
    template<typename T, typename... Rest>
    static void emitValues(Print& o, T value, Rest... rest) {
        emitSingle(o, value);
        o.print(',');
        emitValues(o, rest...);
    }

    /**
     *
     * @param o
     * @param node
     */
    static void emitSingle(Print& o, Node& node) {
        node.emit(o);
    }

    /**
     *
     * @param o
     * @param s
     */
    static void emitSingle(Print& o, const char* s) {
        printQuoted(o, s);
    }

    /**
     * 
     * @param o
     * @param b
     */
    static void emitSingle(Print& o, bool b) {
        o.print(b ? F("true") : F("false"));
    }

    /**
     *
     * @param o
     * @param value
     */
    static void emitSingle(Print& o, int value) {
        o.print(value);
    }

    /**
     *
     * @param o
     * @param value
     */
    static void emitSingle(Print& o, unsigned int value) {
        o.print(value);
    }

    /**
     *
     * @param o
     * @param value
     */
    static void emitSingle(Print& o, long value) {
        o.print(value);
    }

    /**
     *
     * @param o
     * @param value
     */
    static void emitSingle(Print& o, unsigned long value) {
        o.print(value);
    }

    /**
     *
     * @param o
     * @param value
     */
    static void emitSingle(Print& o, double value) {
        o.print(value, 8);
    }
};
